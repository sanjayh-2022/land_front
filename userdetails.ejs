<% layout('./layouts/boilerplate') %>
<style>
    body {
        overflow-x: hidden;
    }
</style>
<body>
    <div style="height: 110px;">  </div>
    <div class="row mt-3" style="overflow: hidden !important;">
        <h2 class="col-6 offset-1 mb-4">User Details:</h2>
        <div class="col-6 offset-3">
            <form id="registerForm" class="needs-validation" novalidate style="overflow: hidden !important;">
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" name="name" placeholder="Enter your name" class="form-control" id="name" required>
                    <div class="invalid-feedback">
                        Enter a valid Name
                    </div>
                </div>
                <div class="mb-3">
                    <label for="aadharNo" class="form-label">Aadhar Number</label>
                    <input type="text" name="aadharNo" placeholder="Enter Aadhar no." class="form-control" id="aadharNo" required>
                    <div class="invalid-feedback">
                        Enter a valid Aadhar No
                    </div>
                </div>
                <div class="mb-3">
                    <label for="panNo" class="form-label">Pan Number</label>
                    <input type="text" name="panNo" placeholder="Enter Pan no." class="form-control" id="panNo" required>
                    <div class="invalid-feedback">
                        Enter a valid Pan No
                    </div>
                </div>
                <div class="mb-3">
                    <label for="phoneNumber" class="form-label">Phone Number</label>
                    <input type="text" name="phoneNumber" placeholder="Enter your phone no" class="form-control" id="phoneNumber" required>
                    <div class="invalid-feedback">
                        Enter your phone number
                    </div>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email Id</label>
                    <input type="email" name="email" placeholder="Enter your email" class="form-control" id="email" required>
                    <div class="invalid-feedback">
                        Enter an email id
                    </div>
                </div>
                <div class="mb-3">
                    <label for="walletAddress" class="form-label">Your Wallet Address: </label>
                    <input type="text" class="form-control" id="walletAddress" disabled>
                </div>
                <button class="btn btn-dark">Register</button>
            </form>
        </div>
    </div>

    <script src="https://unpkg.com/web3modal"></script>
    <script src="https://unpkg.com/@walletconnect/web3-provider/dist/umd/index.min.js"></script>
    <script src="https://cdn.ethers.io/lib/ethers-5.0.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/gun/gun.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>

    <script>
        let provider;
        let signer;
        let contract;

        const contractABI = JSON.parse('<%- JSON.stringify(contractABI) %>');
        const contractAddress = "0x2A609e6A814B61b1B0F99C4490CAccEf52ab1653"; // Your contract address
        const db = Gun(['http://localhost:8765/gun'])

        async function initialize() {
            if (typeof window.ethereum !== 'undefined') {
                try {
                    await window.ethereum.request({ method: 'eth_requestAccounts' });
                    provider = new ethers.providers.Web3Provider(window.ethereum);
                    signer = provider.getSigner();
                    contract = new ethers.Contract(contractAddress, contractABI, signer);
                    const address = await signer.getAddress();
                    document.getElementById('walletAddress').value = address;
                    console.log('Contract initialized', address);

                } catch (error) {
                    console.error('Error initializing contract:', error);
                }

                window.ethereum.on('accountsChanged', async (accounts) => {
                    const address = accounts[0];
                    document.getElementById('walletAddress').value = address;
                    signer = provider.getSigner(address);
                    contract = new ethers.Contract(contractAddress, contractABI, signer);
                });
            } else {
                alert('MetaMask is not installed. Please install MetaMask and try again.');
            }
        }

        document.getElementById('registerForm').onsubmit = async (e) => {
            e.preventDefault();
            if (contract) {
                const name = document.getElementById('name').value;
                const aadharNo = document.getElementById('aadharNo').value;
                const panNo = document.getElementById('panNo').value;
                const phoneNumber = document.getElementById('phoneNumber').value;
                const email = document.getElementById('email').value;
                const userDetails = {
                    aadharNo: aadharNo,
                    panNo: panNo
                };
                const userDetailsString = JSON.stringify(userDetails);
                const userHash = CryptoJS.SHA256(userDetailsString).toString();
                db.get('userDetails').get(userHash).put(userDetails, (ack) => {
                    if (ack.err) {
                      console.error('Error storing data:', ack.err)
                    } else {
                      console.log('Data stored successfully')
                    }
                  })
                console.log("User Details Stored successfully! Hash: ", userHash);
                try {
                    const details=userHash
                    const tx = await contract.registerUser(name, details, phoneNumber, email);
                    console.log('Transaction hash:', tx.hash);
                    const receipt = await tx.wait();
                    console.log('Transaction confirmed:', receipt);

                    fetch('/registerUser', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            txHash: tx.hash,
                            txReceipt: receipt
                        }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Registration successful!');
                        } else {
                            alert('Registration failed.');
                        }
                    })
                    .catch(error => {
                        console.error('Error sending transaction data to server:', error);
                        alert('Failed to register user.');
                    });
                } catch (error) {
                    console.error('Error registering user:', error);
                    alert('Failed to register user.');
                }
            } else {
                alert('Contract is not initialized');
            }
        };

        window.addEventListener('load', initialize);
    </script>
</body>
